// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array freeHeap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeHeap = 2048;  // base of heap
        let freeList = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        var int block, minSize, currNode, prevNode;
        var boolean hasNext;

        let block = 0;
        let minSize = 14335; // maximal size

        if ((freeHeap + size + 2) < 16384){   // end of Heap
             let block = freeHeap + 2;
             let ram[freeHeap + 1] = size;
             let ram[freeHeap] = 0;
             let freeHeap = freeHeap + size + 2;
             return block;
        }

        // else searching best block free list

        if (freeList = 0){
            return 0;           // change 0 to what to return if no memo !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        }
        else{
            let hasNext = true;
        }

        let currNode = freeList;
        let prevNode = freeList;
        while(hasNext){
            if(~(ram[currNode + 1] > size)){
                if(ram[currNode + 1] < minSize){
                    let minSize = ram[currNode + 1];
                    let block = currNode + 2;
                }
            }
            if (ram[currNode] = 0){
                let hasNext = false;
            }
            else{
                let prevNode = currNode;
                let currNode = ram[currNode];
            }
        }

        if(block = 0){
            return 0;           // change 0 to what to return if no memo !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        }
        else{
            let ram[prevNode] = ram[currNode];
        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int currNode;
        let currNode = freeList;
        while(~(ram[currNode] = 0)){
            let currNode = ram[currNode];
        }
        let ram[currNode] = o - 2;
        let ram[o - 2] = 0;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. */
	function int max(Array o) {
        var int max, i, size;
        let max = 0;    // change 0 to minimal int !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        let i = 0;
        let size = ram[o - 1];
        while(i < size){
            if (ram[o + i] > max){
                let max = ram[o + i];
            }
        }
        return max;
    }
}
