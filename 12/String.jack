// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array string;
    field int length, max_len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let length = 0;
        let max_len = maxLength;
        let string = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(string);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
         return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < max_len) {
            do setCharAt(length, c);
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int curr, sum;
        var boolean check;
        let curr = 0;
        let sum = 0;
        let check = false;
        if((string[0] = 45)) {
            let check = true;
            let curr = 1;
        }
        while((curr < length) & String.checking_digit(string[curr])) {
            let sum = (sum*10) + String.digit_val(string[curr]);
            let curr = curr + 1;
        }
        if (check){
             return -sum;
        }
        return sum;
    }


    function boolean checking_digit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    function int digit_val(char c) {
        return c - 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int curr, tem, len;
//        let length = 0;
//        if (val = 0){
//            do setCharAt(0,48);
//            let length = 1;
//            return;
//        }
        let length = 0;
        if (val <= 0){
            let val = -val;
            do setCharAt(length, 45);
            let length = length +1;
        }
        let curr = val;
        while (curr > 0) {
            let length = length +1;
			let curr = curr / 10;
		}
		let len = length;
		let curr = val;
		while (curr > 0){
            let tem = curr - ((curr / 10) * 10);
            let tem = tem + 48;
            let len = len -1;
            do setCharAt(len, tem);
            let curr = curr / 10;
		}
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
