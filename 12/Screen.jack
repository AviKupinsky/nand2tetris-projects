// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static int color;

    /** Initializes the Screen. */
    function void init() {
        let color = 0;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while(i < 24576){
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if(b){
            let color = 1;
        }
        else{
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = ((32*y) + (x/16));
        let value = Math.getPowerOf2(Math.mod(x, 16));
        if (color){
            do Memory.poke(16384 + address, Memory.peek(16384 + address) | value);
        }
        else{
            let value = ((-1) - value);
            do Memory.poke(16384 + address, Memory.peek(16384 + address) & value);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, temp, address, address2;

        // set x1 to be the left point
        if (x2 < x1){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        // if horizontal line we paint byte by byte and the reminders in the sides
        if ((y1 = y2)){
             let a = Math.mod(x1, 16);
             let b = Math.mod(x2, 16);

             // painting left remainder
             let temp = 0;
             while ((a + temp) < 16){
                do Screen.drawPixel(x1 + temp,y1);
                let temp = temp + 1;
             }

             // painting the center
             let address = ((32*y1) + (((16-a) + x1)/16));
             let address2 = ((32*y2) + ((x2 - b)/16));
             while(address < address2){
                do Memory.poke(address + 16384, -color);
                let address = address + 1;
             }

             // painting right remainder
             let temp = b + 1;
             while (temp > 0){
                do Screen.drawPixel(x2 - (temp - 1) ,y2);
                let temp = temp - 1;
             }
             return;
        }

        // vertical line
        if ((x1 = x2)){
            if (y1 < y2){
                while(y1 < (y2 + 1)){
                    do Screen.drawPixel(x1,y1);
                    let y1 = y1 + 1;
                }
            }
            else{
                 while(y2 < (y1 + 1)){
                     do Screen.drawPixel(x1,y2);
                     let y2 = y2 + 1;
                }
            }
            return;
        }


        let a = 0;
        let b = 0;
        let dx = x2 - x1;

        // east south
        if (y1 < y2){
            let dy = y2 - y1;
            let temp = ((a*dy) - (b*dx));
            while ((a < (dx + 1)) & (b < (dy + 1))){
                do Screen.drawPixel(x1 + a, y1 + b);
                if (temp < 0){
                    let temp = temp + dy;
                    let a = a + 1;
                }
                else{
                    let temp = temp - dx;
                    let b = b + 1;
                }
            }
        }
        // east north
        else{
            let dy = y1 - y2;
            let temp = ((a*dy) + (b*dx));
            while ((a < (dx + 1)) & (b > (-dy - 1))){
                do Screen.drawPixel(x1 + a, y1 - b);
                if (temp > 0){
                    let temp = temp - dy;
                    let a = a + 1;
                }
                else{
                    let temp = temp + dx;
                    let b = b + 1;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = y1;
        while (i < (y2 + 1)){
            do Screen.drawLine(x1, i, x2, i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        var int r_squared;

        let dy = -r;
        let r_squared = r*r;
        while( ~(dy > r) ) {
            let dx = Math.sqrt(r_squared-(dy*dy));
            do Screen.draw_circle_helper( x-dx, x+dx, y+dy );
            let dy = dy + 1;
        }
        return;
    }


    function void draw_circle_helper(int x1, int x2, int y) {
        var int temp;

        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while(~(x2 < x1)){
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }

        return;
    }
}
